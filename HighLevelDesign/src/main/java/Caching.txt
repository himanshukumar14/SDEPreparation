Cache Invalidation
------------------------

While caching is fantastic, it requires some maintenance to keep the cache coherent with the source of truth (e.g., database).
If the data is modified in the database, it should be invalidated in the cache; if not, this can cause inconsistent application behavior.

Solving this problem is known as cache invalidation; there are three main schemes that are used:
1) Write-through cache - data is written into the cache and the corresponding database simultaneously.
                         write-through minimizes the risk of data loss, since every write operation must be done twice
                         before returning success to the client, this scheme has the disadvantage of higher latency for write operations.

2) Write-around cache - data is written directly to permanent storage, bypassing the cache.
                        Has the disadvantage that a read request for recently written data will create a “cache miss”
                        and must be read from slower back-end storage and experience higher latency.

3) Write-back cache - data is written to cache alone, and completion is immediately confirmed to the client.
                      This results in low-latency and high-throughput for write-intensive applications; however,
                      this speed comes with the risk of data loss in case of a crash or other adverse event because
                      the only copy of the written data is in the cache.



Cache eviction policies
-----------------------------

First In First Out (FIFO) - The cache evicts the first block accessed first without any regard to how often or how many times it was accessed before.
Last In First Out (LIFO) - The cache evicts the block accessed most recently first without any regard to how often or how many times it was accessed before.
Least Recently Used (LRU) - Discards the least recently used items first.
Most Recently Used (MRU) - Discards, in contrast to LRU, the most recently used items first.
Least Frequently Used (LFU) - Counts how often an item is needed. Those that are used least often are discarded first.
Random Replacement (RR) - Randomly selects a candidate item and discards it to make space when necessary.